             +--------------------------+
             |          CS 212          |
             | PROJECT 2: USER PROGRAMS |
             |     DESIGN DOCUMENT      |
             +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>
FirstName LastName <email@domain.example>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

               ARGUMENT PASSING
               ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

                 SYSTEM CALLS
                 ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

/*Global lock used in process and syscall files
which secures that the child_process struct is not being
exposed to race conditions */
struct lock process_lock;

/*This struct is in charge of all commmunication
between parent and a particular child. Makes it 
possible to wait, free correctly, pass error, etc*/
struct child_process
{
   tid_t tid;                    /*Threads tid*/
   int status;                   /*Threads status*/
   bool wait_called;             /*Has parent already called process_wait on child*/
   bool child_error;             /*Did the child encounter an error*/
   bool tried_to_free;           /*Did the parent try to free this child*/
   char *file_name;              /*Child thread file name*/
   struct semaphore wait_child;  /*Semaphore to make parent wait for start process to finish before finishing exec_proces*/
   struct list_elem wait_elem;   /*Elem for child to be put in parents list*/
   struct condition wait_cond;   /*Cond variable to wake up parent in process_wait when child exits*/
   struct lock wait_lock;        /*Lock to wake up parent in process_wait when child exits*/

};


struct thread
{
   char exec_name[16];        /* Name used to print */
   struct file *exec_file;    /* File being executed*/
   int fd;                   /* Threads fd */
   struct list fd_list;      /* Threads fd_list */
   struct list children; /*List of this threads chilldren*/
   struct child_process *process; /*Pointer to the child_process of this thread*/
};

static struct lock filesys_lock;
static bool filesys_lock_initialized = false;
struct fd_elem
{
  int fd;
  struct file *file;
  struct list_elem elem;
};

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

    Our wait implemententation checks to see if it has children if not 
    it will return -1. Then it will loop through children, which is
    a list of struct child_process which the current thread created,
    looking for the child_process with the requested tid. If not found 
    return -1. If found check if wait has been called, if so return -1.
    Otherwise check if the child->status != INITIAL_STATUS if so return
    status. Otherwise we fall into the most interesting case.

    When wait has not been called previously on the child, and 
    status = INITIAL_STATUS, then we must wait for child to exit. 
    This is done using a condition variable wait_cond and lock wait_lock
    which are shared between the child and parent through child_process.
    We put the parent to sleep with wait_cond in a while loop ensuring 
    that only if the child status which we are waiting on is no longer 
    INITIAL_STATUS will we stop sleeping. 

    We wake up the parent thread in the bottom of exit_handler. When
    we are in the situation where the parent has not yet exited, we
    know it must be waiting on the child to exit. In this case we 
    cond_signal the parent by using the shared wait_cond and protect
    the signal using the shared wait_lock to wake up the parent. 

    We also implemented freeing so that the last process to exit is the
    one which frees. This is handled through a boolean in the child_process 
    struct. 

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

    In the child_process struct we have a semaphore called wait_child. 
    In process_execute we first initialize the child process' 
    child_process. We then create the new thread and pass the new 
    child_process through the thread_create() call. We add this child to
    the parents list of children. We then make the parent wait until the
    child has finished start_process using sema_down(&wait_child).
    
    Passing the child_process through thread_create() gives us access to
    child_process in the childs call to start_process. At the end of 
    start_process, after the load has been completed we can see if the 
    load was done successfully through the success boolean. If sucess 
    is true we will wake up the parent using sema_up(&wait_child). If 
    unsuccessful we set the child_process' child_error boolean to true,
    wake up the parent using sema_up(&wait_child), and thread_exit().

    The sema_up wakes up the parent and we are back in process_execute. 
    At this point we check the child_process' child_error, If it is
    true return -1, otherwise finish as usual. This wait_child semaphore 
    ensures that the parent must wait until after the child thread has 
    loaded to finish process_execute(). The shared child_process struct 
    allows for information to easily be passed between parent and child.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
